fml.define('wap/app/touchSlide2', ['wap/zepto'], function() {
	/*
	@plugName: wap.touchSlide.js
	@author: xudeming208@126.com
	@data: 2013-06-22
	@example:
		$(id).touchSlide({
	        //是否需要循环轮播
	        isLoop: true,
	        //是否自动播放
	        isAuto: true,
	        //效果时间
	        speed: 500,
	        //效果间隔时间
	        autoTime: 5000,
			//滑动前的回调
			beforeCallback: function() {},
			//滑动完成后的回调
			finishCallback: function() {}
		});
	*/
	;
	(function($) {
		var TRANSFORM = (function() {
			var vendorTransform = ['transform', '-webkit-transform', '-moz-transform', '-o-transform'],
				style = document.body.style,
				len = vendorTransform.length,
				i = 0

			for (; i < len; i++) {
				if (vendorTransform[i] in style) {
					return vendorTransform[i]
				}
			}
		})();
		//返回transform
		function returnTransform(val) {
			return 'translate3d(' + val + ',0,0)';
		}
		//设置transform
		function setTransform(obj, val) {
			obj.css(TRANSFORM, returnTransform(val));
		}
		/*属性写在构造函数中*/
		function TouchSlide(el, opts) {
			var self = this;
			self.wrap = el;
			self.ul = el.find('ul');
			self.li = self.ul.find('li');
			self.len = self.li.length;
			self.numBox = el.parent().find('.num');
			self.isLoop = opts.isLoop;
			self.isAuto = opts.isAuto;
			self.speed = opts.speed;
			self.autoTime = opts.autoTime;
			self.beforeCallback = opts.beforeCallback;
			self.finishCallback = opts.finishCallback;
			self.index = 0;
			self.timer = null;
			//执行
			self.init();
		}
		/*方法写在原型中*/
		TouchSlide.prototype = {
			/*初始化*/
			init: function() {
				var self = this;
				self.config();
				self.autoPlay();
				self.bind();
			},
			/*配置*/
			config: function() {
				var self = this;
				for (var m = 0; m < self.len; m++) {
					self.numBox.append("<b>" + (m + 1) + "</b>");
				}
				self.numBoxB = self.numBox.children();
				self.numBoxB.eq(0).addClass('cur');
				if (self.isLoop) {
					self.ul.width((self.len + 2) * 100 + '%');
					self.li.eq(0).clone().appendTo(self.ul);
					self.li.eq(self.len - 1).clone().appendTo(self.ul);
					self.ul.children().eq(self.len + 1).css({
						"position": "relative",
						"left": '-100%'
					});
				} else {
					self.ul.width(self.len * 100 + '%');
				}
				self.beforeCallback && typeof self.beforeCallback == "function" && self.beforeCallback();
			},
			/*移动*/
			move: function() {
				var self = this;
				var animatObj = {};
				if (arguments[0] == 0) {
					if (!self.isLoop) {
						(self.index < self.len - 1) && (self.index++);
					} else {
						self.index++;
					}
				} else if (arguments[0] == 1) {
					if (!self.isLoop && self.index > 0) {
						self.index--;
					} else if (self.isLoop) {
						self.index--;
					}
				}
				animatObj[TRANSFORM] = returnTransform(-self.index * 100 + '%');
				self.wrap.animate(animatObj,
					self.speed,
					function() {
						if (self.index > self.len - 1) {
							setTransform(self.wrap, 0);
							self.index = 0;
						} else if (self.index < 0) {
							setTransform(self.wrap, -(self.len - 1) * 100 + '%');
							self.index = self.len - 1;
						}
						self.numBoxB.removeClass('cur').eq(self.index).addClass('cur');
						self.finishCallback && typeof self.finishCallback == "function" && self.finishCallback();
					});
			},
			/*自动*/
			autoPlay: function() {
				var self = this;
				clearInterval(self.timer);
				if (self.isAuto) {
					self.timer = setInterval(function() {
							self.move(0);
						},
						self.autoTime);
				}
			},
			/*touch事件*/
			bind: function() {
				var self = this;
				var startX, startY, ulOffset, spirit = null;

				function touchStart(event) {
					if (!event.touches.length) return;
					clearInterval(self.timer);
					spirit = null;
					var touch = event.touches[0];
					startX = touch.clientX;
					startY = touch.clientY;
				}

				function touchMove(event) {
					if (!event.touches.length) return;
					var touch = event.touches[0],
						x = touch.clientX - startX,
						y = touch.clientY - startY;
					//这里是为了手指一定是横向滑动的,原理是计算X位置的偏移要比Y的偏移大
					if (Math.abs(x) > Math.abs(y)) {
						//横向滑动时阻止页面滚动
						event.preventDefault();
						//向左滑动
						(x < 0) && (spirit = 0);
						//向右滑动
						(x > 0) && (spirit = 1);
					}
				}

				function touchEnd(event) {
					spirit == 0 && self.move(0);
					spirit == 1 && self.move(1);
					self.autoPlay();
				}
				//监听
				self.wrap[0].addEventListener("touchstart", touchStart, false);
				self.wrap[0].addEventListener("touchmove", touchMove, false);
				self.wrap[0].addEventListener("touchend", touchEnd, false);
			}
		};
		//插件
		$.fn.touchSlide = function(options) {
			var opts = $.extend({}, $.fn.touchSlide.defaults, options);
			this.each(function() {
				//new构造函数对象
				new TouchSlide($(this), opts);
			});
		};
		/*定义默认值*/
		$.fn.touchSlide.defaults = {
			//是否需要循环轮播
			isLoop: true,
			//是否自动播放
			isAuto: true,
			//效果时间
			speed: 500,
			//效果间隔时间
			autoTime: 5000,
			//滑动前的回调
			beforeCallback: function() {},
			//滑动完成后的回调
			finishCallback: function() {}
		};
	})(Zepto)
});