!window.MLSPassport && (window.MLSPassport = {});
window.MLSPassport.login = Login

function Login(opts, passport){
	var mSelf = this
	this.opts = opts || {}
	this.passport = passport || new Passport(opts)

	this.passport.setName.call(this, 'login')
	this.risk_sms_custom = this.opts.risk_sms_custom|0

	opts.watch && this.passport.bridge.addWatch(opts.watch)


	this.dom = {}

	this.passport.bridge.cookie.set('LOGON_FROM' ,  document.referrer);

	this.loginStart = function(){
		mSelf.initDom()
		mSelf.initInput()
		mSelf.setValidate(function(){mSelf.doLogin()});
	}

	this.loginDone = this.opts.loginDone || function(){
	}

	this.checkLogin()
}

Login.prototype.initDom = function(){
	var passport = this.passport

	this.ui = $.extend({},{
			usernamePlaceholder:'邮箱/手机号/昵称'
			,passwordPlaceholder:'密码'
			,name:this.name
		},this.opts.ui)

	var tpl = require('login.html')
	this.dom.outer = $(this.opts.outer || '#loginBox').html(passport.shareTmp(tpl, this.ui))
	this.dom.msgArea = this.dom.outer.find('.passport-form-message')
}

Login.prototype.initInput = function(){
	var inputList = ['username','password','remember']

	for(var i in inputList){
		var inputname = inputList[i]
		this.dom[inputname] = this.dom.outer.find('#'+inputname)
	}
}

//表单操作
Login.prototype.setValidate = function(cbk){
	var validateRules = {
		'username' : {},
		'password' : {}
	}

	validateRules.username['req=' + this.ui.usernamePlaceholder] = '请输入您的用户名或注册邮箱'
	validateRules.password['req=' + this.ui.passwordPlaceholder] = '请输入密码'
	validateRules.password['minlen=' + 6] = '输入密码需在6位到32位间'
	validateRules.password['maxlen=' + 32] = '输入密码需在6位到32位间'

	var formName = 'loginForm'
	var opts = {
		'success' : 'span=msg_ok',
		'error': 'span=msg_err'
	}
	var showStyle = {
		'showmsgbyline=msg_error' : ''
	}

	showStyle['showmsgforsubmit=passport-form-submit-' + this.name] = cbk

	this.validate = new Validate().validate(formName, validateRules, showStyle, opts)
}

Login.prototype.doLogin = function (){
	var mSelf = this
	var passport = this.passport
	var data = {
		'app_id' : passport.app_id,
		'username' : mSelf.dom.username.val(),
		'password' : mSelf.dom.password.val(),
		'remember' : mSelf.dom.remember[0].checked ? 1 : 0
	};

	passport.bridge.ajax('/login', data , function(res){
		mSelf.dom.msgArea.html(res.message).show()


		switch(res.error_code){
			case 0 : 
				passport.bridge.setCookies(res.data.session)
				
				break;

			case 1004 : 
				if(!mSelf.risk_sms_custom){
					if(!mSelf.risksms){
						mSelf.risksms = passport.getPicRisk({
							parents:mSelf
							,ruleid:mSelf.ruleid
						})
					}
					if(!mSelf.mobile){
						mSelf.mobile = passport.getMobile({
							parents:mSelf
							,mobile:res.data.mobile
						})
					}
				}

				break;

			case 1005 : 
				if(!mSelf.riskpic){
					mSelf.riskpic = passport.getPicRisk({
						parents:mSelf
						,ruleid:mSelf.ruleid
					})
				}

				mSelf.risk.updateCaptcha()

				break;

			default :
				break;
		}

	})
}

Login.prototype.checkLogin = function(callbacks){
	var mSelf = this
	var passport = this.passport
	passport.bridge.ajax('/init', {app_id:this.passport.app_id} , function(res){

		mSelf.ruleid = res.data.ruleid

		if(typeof callbacks == 'function'){
			callbacks(res)

		}else{

			switch(res.error_code){
				case 0:
					mSelf.loginDone && mSelf.loginDone(res)
					break;

				case 10001:
					mSelf.loginStart && mSelf.loginStart(res)
					break;

				default:
					break;
			}
		}

	});
}

