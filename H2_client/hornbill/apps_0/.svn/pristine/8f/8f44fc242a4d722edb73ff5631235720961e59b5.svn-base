/*common*/
var $ = require('wap/zepto')
require('wap/zepto/touch')

/* 层级控制器，需要先调用init方法 */
var viewController = {
	viewParent: $('.main_container')
	,currentIndex: 0
	,length: 0 //总层数
	,init: function(index){
		// index 0~3 代表初始化时的层级
		index = index|0
		this.currentIndex = index
		this.length = this.viewParent.find('[class*=step_wrapper_]').length
		if(this.currentIndex>length-1) 
			this.currentIndex=length-1;
		if(this.currentIndex<0) 
			this.currentIndex=0;
		this.reloadView()
	}
	,next: function(){
		//跳转至下一层
		this.currentIndex++
		var length = this.length
		if(this.currentIndex>length-1) 
			this.currentIndex=length-1;
		this.reloadView()
	}
	,prev: function(){
		//回到上一层
		this.currentIndex--
		if(this.currentIndex<0) 
			this.currentIndex=0;
		this.reloadView()
	}
	,reloadView: function(){
		switch(this.currentIndex){
			case 0:
				this.viewParent.find('.step_others_wrapper').removeClass('show_other')
				break;
			case 1:
			case 2:
			case 3:
				this.viewParent.find('.step_others_wrapper').addClass('show_other')
				this.viewParent.find('.step_others').removeClass(function(index, className){
					var removeClasses = []
					className.split(' ').forEach(function(name){
						if(name.indexOf('show')!==-1){
							removeClasses.push(name)
						}
					})
					return removeClasses.join(' ')
				}).addClass('show'+(this.currentIndex+1))
				if(this.currentIndex===3){
					this.viewParent.find('.step_wrapper_4').addClass('show_ani')
				}
				break;
			default:
				break;
		}
	}
}

//禁止默认滑动事件
var startX = 0, startY =0
document.addEventListener('touchstart', function(event){
	var touch = event.touches[0]; //获取第一个触点  
    startX = Number(touch.pageX); //页面触点X坐标  
    startY = Number(touch.pageY); //页面触点Y坐标  
}, false)
document.addEventListener('touchmove', function (event) {
	if($(event.target).parents('.step_wrapper_3').length===0){
		event.preventDefault();
	} else {
		var touch = event.touches[0]; //获取第一个触点  
        var x = Number(touch.pageX); //页面触点X坐标  
        var y = Number(touch.pageY); //页面触点Y坐标
        if(Math.abs(startY-y)>Math.abs(startX-x)){
        	event.preventDefault();
        }
	}
}, false);


//初始化层级控制
viewController.init(0)

//初始化翻页滑动事件
;(function initSwipe(){
	var hasTransitionend = (function(){
		var transitions = {
			'transition':'transitionend',
			'OTransition':'oTransitionEnd',
			'MozTransition':'transitionend',
			'WebkitTransition':'webkitTransitionEnd'
		}
		for(var k in transitions){
			if(('on'+transitions[k]) in window)
				return transitions[k];
		}
		return false;
	})() //是否支持Transitionend
	var isBindOver = false; //已绑定翻页事件flag
	
	if(hasTransitionend){
		window.addEventListener(hasTransitionend, function(){
			closeSwipeEvent()
			initSwipeEvent()
		}, false)
	}

	initSwipeEvent()
	
	function initSwipeEvent(){
		if(isBindOver) return;
		isBindOver = true;
		$('.main_container').on('swipeUp', function(){
			closeSwipeEvent()	
			viewController.next()

		}).on('swipeDown', function(){
			closeSwipeEvent()
			viewController.prev()
		})
	}

	function closeSwipeEvent(){
		isBindOver = false;
		$('.main_container').off('swipeUp swipeDown');
		// if not support transitonend or no transition
		setTimeout(function(){
			initSwipeEvent()
		}, 500)
	}
})();

/* 第一页相关 */
var pageOneViewController = {
	init: function(index){
		index = index|0
		this.length = this.viewParent.find('.view').length
		this.currentIndex = index
		if(this.currentIndex>length-1) this.currentIndex=length-1;
		if(this.currentIndex<0) this.currentIndex=0;
		this.viewParent.on('swipeLeft', function(event) {
			pageOneViewController.next()
		}).on('swipeRight', function(event) {
			pageOneViewController.prev()
		});
	}
	,next: function(){
		this.currentIndex++
		var length = this.length
		if(this.currentIndex>length-1) this.currentIndex=length-1;
		this.reloadView()
	}
	,prev: function(){
		this.currentIndex--
		if(this.currentIndex<0) this.currentIndex=0;
		this.reloadView()
	}
	,reloadView: function(){
		this.viewParent.find('.showline').removeClass('showline')
		var $view = this.viewParent.removeClass(function(index, className){
			var removeClasses = []
			className.split(' ').forEach(function(name){
				if(name.indexOf('view')===0){
					removeClasses.push(name)
				}
			})
			return removeClasses.join(' ')
		}).addClass('view'+this.currentIndex).find('.view').eq(this.currentIndex)
		setTimeout(function(){
			$view.addClass('showline')
		}, 500)
	}
	,autoShow: function(){
		var _this = this
		var _view = this.viewParent
		_view.addClass('viewauto')
		_view.find('.showline').removeClass('showline')
		preventAllTouch()
		setTimeout(function(){
			_view.removeClass('viewauto')
			_this.reloadView()
			_view.find('[data-change]').addClass('show_change')
			openTouch()
		}, 4100)
	}
	,length: 0
	,index: 0
	,viewParent: $('.step_wrapper_1')
}
pageOneViewController.init()

/* 第二页 */
var pageTwoViewController = {
	viewParent: $('.step_wrapper_2')
	,index: 0
	,length: 0
	,init: function(){
		this.index = 0;
		this.length = this.viewParent.find('.page2_ul').children('.page2_item').length
		var _this = this
		this.viewParent.on('swipeRight', function(event) {
			_this.prev()
		}).on('swipeLeft', function(event) {
			_this.next()
		});
	}
	,next: function(){
		this.index++
		if(this.index>this.length-1){
			this.index = this.length-1
		}
		this.reloadView()
	}
	,prev: function(){
		this.index--
		if(this.index<0){
			this.index = 0;
		}
		this.reloadView()
	}
	,reloadView: function(){
		this.viewParent.find('.page2_ul').removeClass(function(index, className){
			var removeClasses = []
			className.split(' ').forEach(function(name){
				if(name.indexOf('show')===0){
					removeClasses.push(name)
				}
			})
			return removeClasses.join(' ')
		}).addClass('show'+this.index)
	}
}
pageTwoViewController.init()

/* 初始化*/
window.onload = function(){
	setTimeout(function(){
		$('#win_loading').remove()
		$('.main_container').show()
		pageOneViewController.autoShow()
	}, 500)
}

function preventAllTouch(){
	$('#preventTouchMasker').show()
}

function openTouch(){
	$('#preventTouchMasker').hide()
}
