/*common*/
var $              = require( 'wap/zepto' ),
    CheckLogin     = require( 'circle/app/checkLogin' ),
    Tab            = require( 'wap/component/tab' ),
    touchSlide     = require( 'wap/app/touchSlide' ),
    WaterFall      = require( 'circle/component/waterfall' ),
    OpenAppLink    = require( 'wap/app/openAppLink' ),
    Tracking       = require( 'wap/app/tracking' ),
    ShareTmp       = require( 'wap/component/shareTmp' ),
    WindowScroll   = require( 'wap/component/windowScroll' ),

    LIMIT          = 10,
    FOLLOWED       = 'is-followed',
    NOT_FOLLOW     = 'is-not-follow',
    SIMILAR        = 'similar',
    MATCH          = 'match',
    SHOP           = 'shop',
    TID            = fml.vars.tid,
    R              = fml.vars.R,
    CR_STR         = R + ':twitter_id=' + TID + ':_page_area=',
    DATA           = { tid: TID },

    $body          = $( document.body ),
    $tabs          = $body.find( '.tab' ),
    $contents      = $body.find( '.js-tab-content' ),
    $contentWrap   = $body.find( '.content-wrap' ),
    $pullUp        = $( '#pullUp' ),
    tabHeight      = $tabs.height(),
    lastTabPos     = $tabs.offset().top,
    oldMarginTop   = $contentWrap.css( 'marginTop' ),
    isTabFixed     = false,

    followData     = {
        follow: {
            url:         '/aj/follow/shop/follow',
            text:        '已关注',
            removeClass: NOT_FOLLOW,
            addClass:    FOLLOWED
        },

        unfollow: {
            url:         '/aj/follow/shop/unfollow',
            text:        '关注',
            removeClass: FOLLOWED,
            addClass:    NOT_FOLLOW
        }
    },
    //瀑布流加载商品完毕
    notEnoughItems = false,
    isRequesting   = false,
    isMatchLoaded  = false,
    isShopLoaded   = false,
    isMatchEmpty   = false,
    isShopEmpty    = false,
    waterfallInstance, tabInstance

require( 'wap/zepto/touch' );

function followOrUnfollow( $el, type ) {
    var shopId = $el.data( 'shop' ),
        fData  = followData[ type ]

    $.ajax( {
        data:     {
            shop_id: shopId
        },
        dataType: 'json',
        type:     'post',
        url:      fData.url,
        success:  function( data ) {
            if ( data.code == 0 ) {
                $el.addClass( fData.addClass )
                    .removeClass( fData.removeClass )
                    .text( fData.text )
            } else {
                alert( data.msg )
            }
        },
        complete: function() {
            isRequesting = false
        }
    } )
};

function parseItemLink( id ) {
    return OpenAppLink.getAppLink( {
        protocol: 'twitter_single',
        param:    {
            'twitter_info': {
                'twitter_id': id,
                'is_doota':   1
            }
        }
    } )
}

function parseLink( protocol, param ) {
    return OpenAppLink.getAppLink( {
        protocol: protocol,
        param:    param
    } )
}

function handleDataLoaded() {
    var type = tabInstance.els.curTab.data( 'type' )

    if ( ( type == MATCH && isMatchLoaded ) ||
        ( type == SHOP && isShopLoaded ) ) {
        if ( ( type == MATCH && isMatchEmpty ) || (type == SHOP && isShopEmpty ) ) {
            $pullUp.hide()
        } else {
            $pullUp.attr( 'status', 'stop' )
        }
    } else {
        $pullUp.show()
    }
}

( function() {
    WindowScroll.bind( function( lastPos ) {
        if ( lastPos - lastTabPos > tabHeight ) {
            if ( !isTabFixed ) {
                $tabs.addClass( 'fixed-tab' )
                $contentWrap.css( 'marginTop', tabHeight )
                isTabFixed = true
            }
        } else if ( isTabFixed ) {
            $tabs.removeClass( 'fixed-tab' )
            $contentWrap.css( 'marginTop', oldMarginTop )
            isTabFixed = false
            lastTabPos = $tabs.offset().top
        }
    } )

    waterfallInstance = WaterFall.init( {
        el:             $contents.find( 'div' )[ 0 ],
        tmpl:           'tmpl_similar',
        url:            '/aj/similar/index/similar',
        data:           DATA,
        colNum:         2,
        helpers:        {
            parseItemLink: parseItemLink
        },
        dataFilter:     function( data ) {
            return Array.isArray( data ) ? data : data.data
        },
        onFetchSuccess: function( data, config ) {
            if ( !data.length ) {
                notEnoughItems = true
                waterfallInstance.lock()
                $pullUp.attr( 'status', 'stop' )
                return
            }

            config.data.offset += LIMIT
        }
    } ).start( fml.vars.similarGoods )

    tabInstance = Tab.init( {
        afterChange: function( item ) {
            window.scrollTo( 0, lastTabPos )

            Tracking.cr( 'cr/page_element', {
                _action:   'click',
                _location: CR_STR + item.data( 'area' )
            } )

            if ( item.data( 'type' ) != SIMILAR ) {
                waterfallInstance.lock()
                handleDataLoaded()
            } else if ( !notEnoughItems ) {
                waterfallInstance.unlock()
                $pullUp.attr( 'status', 'loading' )
            }
        }
    } )

    $body.on( 'tap', '.js-follow-btn', function( e ) {
        if ( CheckLogin() && !isRequesting ) {
            isRequesting = true

            var $el = $( e.target )

            if ( $el.hasClass( NOT_FOLLOW ) ) {
                followOrUnfollow( $el, 'follow' )
            } else {
                followOrUnfollow( $el, 'unfollow' )
            }
        }
    } )

    //请求剩余两个 tab 的数据
    $.ajax( {
        type:     'get',
        dataType: 'json',
        data:     DATA,
        url:      '/aj/similar/index/match',
        success:  function( data ) {
            var html = ShareTmp( 'tmpl_match', {
                data:          data,
                parseItemLink: parseItemLink,
                R:             R
            } )
            $contents.filter( '.content-match' ).html( html )

            isMatchLoaded = true
            isMatchEmpty  = data.error_code != '0'
            handleDataLoaded()
        }
    } )

    $.ajax( {
        type:     'get',
        dataType: 'json',
        data:     DATA,
        url:      '/aj/similar/index/shop',
        success:  function( data ) {
            var html = ShareTmp( 'tmpl_shop', {
                data:          data,
                parseLink:     parseLink,
                parseItemLink: parseItemLink,
                R:             R
            } )
            $contents.filter( '.content-shop' ).html( html )

            isShopLoaded = true
            isShopEmpty  = data.error_code != '0'
            handleDataLoaded()
        }
    } )
}() )
