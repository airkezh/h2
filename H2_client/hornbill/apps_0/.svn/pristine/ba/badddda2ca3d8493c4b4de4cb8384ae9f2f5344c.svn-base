/*common*/

var $ = require('wap/zepto')
var Waterfall   = require('circle/component/biWaterfallPlugin')
var optimiseFn = require('circle/component/waterfallOptimise')
var Lazy        = require('m/component/lazyLoad')
var UrlHandle   = require('wap/component/urlHandle')
var Alert       = require('wap/ui/alert')
var lazyLoad    = Lazy.init({ xpath: '.pic_load' })
var shopId      = UrlHandle.getParams( location.href ).shop_id

/**
 * goods_ctime : 默认( data-id : 0 )
 * goods_on_shelf : 最新( data-id : 1 )
 * sale_num : 热销( data-id : 2 )
 * ['price_high','price_lower'] 价格( data-id : 3 )
 * price_high - 降序； lower - 升序
 */
var paramPool   = ['goods_ctime','goods_on_shelf','sale_num',['price_high','price_lower']]

var sortBy      = paramPool[0] //默认

var GOODS_SHELF = '.goods-wall'  //瀑布流渲染父级：.goods-wall
var $gShelf     = $(GOODS_SHELF)

/* 瀑布流tab */
var $sortItem   = $('.s_item')
var $price      = $sortItem.eq(3)  // 这里的3是表示价格 sort item 
$pullUp		 	= $('.pullUp')
var flag        = false
var flag1       = false
var Wf          = null
var cashe       = {}

/** main */

/* 关注 */
var followFlag = true;
$('.follow-wrap').on('click','.can-focus', function(event) {

	if(!followFlag) return;
	followFlag = false;

	var _this = $(this);
	var focusAjaxCbk = function(data){
		if(data.code === 0){
			_this.removeClass('can-focus').html('已关注');
		}
		myAlert(data.msg);
		followFlag = true;
	}
	$.post('/aj/wx/shop/shop_follow', { shop_id: shopId }, focusAjaxCbk,'json');
});

/* 预先绑定懒加载事件 */
lazyLoad.scroll()
/* 初始时手动出发一次瀑布流 */
switchWaterfall( sortBy ) //goods_ctime
/* 瀑布流tab */
$sortItem.on('click', function (){
	var _this = $(this)
	var id = _this.data('id')
	var isActive = _this.hasClass('active')

	// 避免点击过快创建多个瀑布流对象
	if(flag) return
	flag = true
	
	switch (id){
		case 3:
			var status = _this.data('status')
			if(status == 'up'){
				_this.data('status','down')
				sortBy = paramPool[id][0]
			}else{
				_this.data('status', 'up')
				sortBy = paramPool[id][1]
			}
			break;
		default:
			if(isActive) return
			
			if( $price.data('status') ){
				$price.data('status', '')
			}

			sortBy = paramPool[id]
	}

	$sortItem.removeClass('active')
	_this.addClass('active')
	switchWaterfall()
})

/* 加载瀑布流 */
function switchWaterfall(){
	if(Wf){
		Wf.destroy()
		Wf = null
	}
	resetLayout()  //重置
	Wf = Waterfall.init({
		el: GOODS_SHELF,
		// tmpl: 'posterWall',
		url: '/aj/wx/shop/shop_waterfall',
		data: { shop_id: shopId, _orderby: sortBy, limit: 10 },
		dataName: 'gInfo',
		colNum: 2,
		colGap : "10 8",
		hasSideGap : true,
		dataFilter: wfDataFilter,
		onFetchSuccess: wfOnFetchSuccess,
		onFetchFinished: wfOnFetchFinished,
		optimiseFn: optimiseFn
	})
	Wf.start(cashe[sortBy])
}

function wfDataFilter(data){
	var wfConfig = this._config
	var gd       = wfConfig.dataName

	//缓存第一帧的数据
	if(data.frame == 0){
		cashe[sortBy] = data
	}
	return data[gd]
}

function wfOnFetchSuccess(data){
	if(data.length === 0){
		$pullUp.attr('status','stop')
		this.destroy()
		Wf = null
	}
}

function wfOnFetchFinished(data, textStatus){

	if(textStatus == 'timeout'){
		myAlert('抱歉~网络不给力，数据拉不出 o(╯□╰)o')
	}
	lazyLoad.load()
	flag = false
}

function resetLayout(){
	$pullUp.attr('status','loading')
	$gShelf.empty().height(0)
}

function myAlert(ct, cbk){
	return new Alert({ 
		content: ct,
		onSure : cbk
	})
}